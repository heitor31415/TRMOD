#include "Element.h"
#include <string>

// ------------------------------------------------------------------------------------------------------------------ 
CElement::CElement(void)
// ------------------------------------------------------------------------------------------------------------------ 
// --- constuctor initialize all fixed (precalculated constant) values 
// ------------------------------------------------------------------------------------------------------------------ 
{
   int i,j,k,l;
   int num1,num2;

	// precalculated shape function values for all faces and gaussian points
	// stored in the order
	// g[ 8*numgp + 32*numface]
	// f1: xi  =  1.0, gp1: eta=+gp, psi=+gp, gp2: eta=+gp, psi=-gp, gp3: eta=-gp, psi=+gp, gp4: eta=-gp, psi=-gp 
	// f2: xi  = -1.0, gp1: eta=+gp, psi=+gp, gp2: eta=+gp, psi=-gp, gp3: eta=-gp, psi=+gp, gp4: eta=-gp, psi=-gp  
	// f3: eta =  1.0, gp1: xi =+gp, psi=+gp, gp2: xi =+gp, psi=-gp, gp3: xi =-gp, psi=+gp, gp4: xi =-gp, psi=-gp  
	// f4: eta = -1.0, gp1: xi =+gp, psi=+gp, gp2: xi =+gp, psi=-gp, gp3: xi =-gp, psi=+gp, gp4: xi =-gp, psi=-gp  
	// f5: psi =  1.0, gp1: xi =+gp, eta=+gp, gp2: xi =+gp, eta=-gp, gp3: xi =-gp, eta=+gp, gp4: xi =-gp, eta=-gp  
	// f6: psi = -1.0, gp1: xi =+gp, eta=+gp, gp2: xi =+gp, eta=-gp, gp3: xi =-gp, eta=+gp, gp4: xi =-gp, eta=-gp  
	const double g[192] = {
		0.00000000000000, 0.04465819873852, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.62200846792815, 0.00000000000000,
		0.00000000000000, 0.16666666666667, 0.62200846792815, 0.00000000000000, 0.00000000000000, 0.04465819873852, 0.16666666666667, 0.00000000000000,
		0.00000000000000, 0.16666666666667, 0.04465819873852, 0.00000000000000, 0.00000000000000, 0.62200846792815, 0.16666666666667, 0.00000000000000,
		0.00000000000000, 0.62200846792815, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.04465819873852, 0.00000000000000,
		0.04465819873852, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.62200846792815,
		0.16666666666667, 0.00000000000000, 0.00000000000000, 0.62200846792815, 0.04465819873852, 0.00000000000000, 0.00000000000000, 0.16666666666667,
		0.16666666666667, 0.00000000000000, 0.00000000000000, 0.04465819873852, 0.62200846792815, 0.00000000000000, 0.00000000000000, 0.16666666666667,
		0.62200846792815, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.04465819873852,
		0.00000000000000, 0.00000000000000, 0.16666666666667, 0.04465819873852, 0.00000000000000, 0.00000000000000, 0.62200846792815, 0.16666666666667,
		0.00000000000000, 0.00000000000000, 0.62200846792815, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.04465819873852,
		0.00000000000000, 0.00000000000000, 0.04465819873852, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.62200846792815,
		0.00000000000000, 0.00000000000000, 0.16666666666667, 0.62200846792815, 0.00000000000000, 0.00000000000000, 0.04465819873852, 0.16666666666667,
		0.04465819873852, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.62200846792815, 0.00000000000000, 0.00000000000000,
		0.16666666666667, 0.62200846792815, 0.00000000000000, 0.00000000000000, 0.04465819873852, 0.16666666666667, 0.00000000000000, 0.00000000000000,
		0.16666666666667, 0.04465819873852, 0.00000000000000, 0.00000000000000, 0.62200846792815, 0.16666666666667, 0.00000000000000, 0.00000000000000,
		0.62200846792815, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.04465819873852, 0.00000000000000, 0.00000000000000,
		0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.04465819873852, 0.16666666666667, 0.62200846792815, 0.16666666666667,
		0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.62200846792815, 0.16666666666667, 0.04465819873852,
		0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.16666666666667, 0.04465819873852, 0.16666666666667, 0.62200846792815,
		0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.62200846792815, 0.16666666666667, 0.04465819873852, 0.16666666666667,
		0.04465819873852, 0.16666666666667, 0.62200846792815, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
		0.16666666666667, 0.62200846792815, 0.16666666666667, 0.04465819873852, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
		0.16666666666667, 0.04465819873852, 0.16666666666667, 0.62200846792815, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
		0.62200846792815, 0.16666666666667, 0.04465819873852, 0.16666666666667, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000 };


   // precalculated shape function derivate values for all faces and gaussian points
   // only for computing the tangential directions of the area, two derivates per face
   // G1 derivate to xi, G2 derivate to eta, G3 derivate to psi
   // stored in the order
   // g[ 8*numgp + 64*numface]
   // f1(G2,G3): xi  =  1.0, gp1: eta=+gp, psi=+gp, gp2: eta=+gp, psi=-gp, gp3: eta=-gp, psi=+gp, gp4: eta=-gp, psi=-gp 
   // f2(G2,G3): xi  = -1.0, gp1: eta=+gp, psi=+gp, gp2: eta=+gp, psi=-gp, gp3: eta=-gp, psi=+gp, gp4: eta=-gp, psi=-gp  
   // f3(G1,G3): eta =  1.0, gp1: xi =+gp, psi=+gp, gp2: xi =+gp, psi=-gp, gp3: xi =-gp, psi=+gp, gp4: xi =-gp, psi=-gp  
   // f4(G1,G3): eta = -1.0, gp1: xi =+gp, psi=+gp, gp2: xi =+gp, psi=-gp, gp3: xi =-gp, psi=+gp, gp4: xi =-gp, psi=-gp  
   // f5(G1,G2): psi =  1.0, gp1: xi =+gp, eta=+gp, gp2: xi =+gp, eta=-gp, gp3: xi =-gp, eta=+gp, gp4: xi =-gp, eta=-gp  
   // f6(G1,G2): psi = -1.0, gp1: xi =+gp, eta=+gp, gp2: xi =+gp, eta=-gp, gp3: xi =-gp, eta=+gp, gp4: xi =-gp, eta=-gp 
	const double gd[384] = {
		 0.00000000000000, -0.10566243270259,  0.10566243270259,  0.00000000000000,  0.00000000000000, -0.39433756729741, 0.39433756729741,  0.00000000000000,
		 0.00000000000000, -0.39433756729741,  0.39433756729741,  0.00000000000000,  0.00000000000000, -0.10566243270259, 0.10566243270259,  0.00000000000000,
		 0.00000000000000, -0.10566243270259,  0.10566243270259,  0.00000000000000,  0.00000000000000, -0.39433756729741, 0.39433756729741,  0.00000000000000,
		 0.00000000000000, -0.39433756729741,  0.39433756729741,  0.00000000000000,  0.00000000000000, -0.10566243270259, 0.10566243270259,  0.00000000000000,
		 0.00000000000000, -0.10566243270259, -0.39433756729741,  0.00000000000000,  0.00000000000000,  0.10566243270259, 0.39433756729741,  0.00000000000000,
		 0.00000000000000, -0.10566243270259, -0.39433756729741,  0.00000000000000,  0.00000000000000,  0.10566243270259, 0.39433756729741,  0.00000000000000,
		 0.00000000000000, -0.39433756729741, -0.10566243270259,  0.00000000000000,  0.00000000000000,  0.39433756729741, 0.10566243270259,  0.00000000000000,
		 0.00000000000000, -0.39433756729741, -0.10566243270259,  0.00000000000000,  0.00000000000000,  0.39433756729741, 0.10566243270259,  0.00000000000000,
		-0.10566243270259,  0.00000000000000,  0.00000000000000,  0.10566243270259, -0.39433756729741,  0.00000000000000, 0.00000000000000,  0.39433756729741,
		-0.39433756729741,  0.00000000000000,  0.00000000000000,  0.39433756729741, -0.10566243270259,  0.00000000000000, 0.00000000000000,  0.10566243270259,
		-0.10566243270259,  0.00000000000000,  0.00000000000000,  0.10566243270259, -0.39433756729741,  0.00000000000000, 0.00000000000000,  0.39433756729741,
		-0.39433756729741,  0.00000000000000,  0.00000000000000,  0.39433756729741, -0.10566243270259,  0.00000000000000, 0.00000000000000,  0.10566243270259,
		-0.10566243270259,  0.00000000000000,  0.00000000000000, -0.39433756729741,  0.10566243270259,  0.00000000000000, 0.00000000000000,  0.39433756729741,
		-0.10566243270259,  0.00000000000000,  0.00000000000000, -0.39433756729741,  0.10566243270259,  0.00000000000000, 0.00000000000000,  0.39433756729741,
		-0.39433756729741,  0.00000000000000,  0.00000000000000, -0.10566243270259,  0.39433756729741,  0.00000000000000, 0.00000000000000,  0.10566243270259,
		-0.39433756729741,  0.00000000000000,  0.00000000000000, -0.10566243270259,  0.39433756729741,  0.00000000000000, 0.00000000000000,  0.10566243270259,
		 0.00000000000000,  0.00000000000000,  0.10566243270259, -0.10566243270259,  0.00000000000000,  0.00000000000000, 0.39433756729741, -0.39433756729741,
		 0.00000000000000,  0.00000000000000,  0.39433756729741, -0.39433756729741,  0.00000000000000,  0.00000000000000, 0.10566243270259, -0.10566243270259,
		 0.00000000000000,  0.00000000000000,  0.10566243270259, -0.10566243270259,  0.00000000000000,  0.00000000000000, 0.39433756729741, -0.39433756729741,
		 0.00000000000000,  0.00000000000000,  0.39433756729741, -0.39433756729741,  0.00000000000000,  0.00000000000000, 0.10566243270259, -0.10566243270259,
		 0.00000000000000,  0.00000000000000, -0.39433756729741, -0.10566243270259,  0.00000000000000,  0.00000000000000, 0.39433756729741,  0.10566243270259,
		 0.00000000000000,  0.00000000000000, -0.39433756729741, -0.10566243270259,  0.00000000000000,  0.00000000000000, 0.39433756729741,  0.10566243270259,
		 0.00000000000000,  0.00000000000000, -0.10566243270259, -0.39433756729741,  0.00000000000000,  0.00000000000000, 0.10566243270259,  0.39433756729741,
		 0.00000000000000,  0.00000000000000, -0.10566243270259, -0.39433756729741,  0.00000000000000,  0.00000000000000, 0.10566243270259,  0.39433756729741,
		-0.10566243270259,  0.10566243270259,  0.00000000000000,  0.00000000000000, -0.39433756729741,  0.39433756729741, 0.00000000000000,  0.00000000000000,
		-0.39433756729741,  0.39433756729741,  0.00000000000000,  0.00000000000000, -0.10566243270259,  0.10566243270259, 0.00000000000000,  0.00000000000000,
		-0.10566243270259,  0.10566243270259,  0.00000000000000,  0.00000000000000, -0.39433756729741,  0.39433756729741, 0.00000000000000,  0.00000000000000,
		-0.39433756729741,  0.39433756729741,  0.00000000000000,  0.00000000000000, -0.10566243270259,  0.10566243270259, 0.00000000000000,  0.00000000000000,
		-0.10566243270259, -0.39433756729741,  0.00000000000000,  0.00000000000000,  0.10566243270259,  0.39433756729741, 0.00000000000000,  0.00000000000000,
		-0.10566243270259, -0.39433756729741,  0.00000000000000,  0.00000000000000,  0.10566243270259,  0.39433756729741, 0.00000000000000,  0.00000000000000,
		-0.39433756729741, -0.10566243270259,  0.00000000000000,  0.00000000000000,  0.39433756729741,  0.10566243270259, 0.00000000000000,  0.00000000000000,
		-0.39433756729741, -0.10566243270259,  0.00000000000000,  0.00000000000000,  0.39433756729741,  0.10566243270259, 0.00000000000000,  0.00000000000000,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.10566243270259,  0.10566243270259, 0.39433756729741, -0.39433756729741,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.39433756729741,  0.39433756729741, 0.10566243270259, -0.10566243270259,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.10566243270259,  0.10566243270259, 0.39433756729741, -0.39433756729741,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.39433756729741,  0.39433756729741, 0.10566243270259, -0.10566243270259,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.10566243270259, -0.39433756729741, 0.39433756729741,  0.10566243270259,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.10566243270259, -0.39433756729741, 0.39433756729741,  0.10566243270259,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.39433756729741, -0.10566243270259, 0.10566243270259,  0.39433756729741,
		 0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000, -0.39433756729741, -0.10566243270259, 0.10566243270259,  0.39433756729741,
		-0.10566243270259,  0.10566243270259,  0.39433756729741, -0.39433756729741,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000,
		-0.39433756729741,  0.39433756729741,  0.10566243270259, -0.10566243270259,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000,
		-0.10566243270259,  0.10566243270259,  0.39433756729741, -0.39433756729741,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000,
		-0.39433756729741,  0.39433756729741,  0.10566243270259, -0.10566243270259,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000,
		-0.10566243270259, -0.39433756729741,  0.39433756729741,  0.10566243270259,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000,
		-0.10566243270259, -0.39433756729741,  0.39433756729741,  0.10566243270259,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000,
		-0.39433756729741, -0.10566243270259,  0.10566243270259,  0.39433756729741,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000,
		-0.39433756729741, -0.10566243270259,  0.10566243270259,  0.39433756729741,  0.00000000000000,  0.00000000000000, 0.00000000000000,  0.00000000000000};

   /* ---------------------------------------------------------------------
   * set shape derivates at gaussain points 1 to 8 for matrix material
   * index operation: gg1[8*i+j] -> i = number of gaussian point,
   *                                j = number of shape function
   * ---------------------------------------------------------------------*/
   const double gg1[64] = {
      -0.02232909936926,0.02232909936926,0.083333333333333,-0.083333333333333,
      -0.083333333333333,0.083333333333333,0.31100423396407,-0.31100423396407,
      -0.083333333333333,0.083333333333333,0.31100423396407,-0.31100423396407,
      -0.02232909936926,0.02232909936926,0.083333333333333,-0.083333333333333,
      -0.083333333333333,0.083333333333333,0.02232909936926,-0.02232909936926,
      -0.31100423396407,0.31100423396407,0.083333333333333,-0.083333333333333,
      -0.31100423396407,0.31100423396407,0.083333333333333,-0.083333333333333,
      -0.083333333333333,0.083333333333333,0.02232909936926,-0.02232909936926,
      -0.02232909936926,0.02232909936926,0.083333333333333,-0.083333333333333,
      -0.083333333333333,0.083333333333333,0.31100423396407,-0.31100423396407,
      -0.083333333333333,0.083333333333333,0.31100423396407,-0.31100423396407,
      -0.02232909936926,0.02232909936926,0.083333333333333,-0.083333333333333,
      -0.083333333333333,0.083333333333333,0.02232909936926,-0.02232909936926,
      -0.31100423396407,0.31100423396407,0.083333333333333,-0.083333333333333,
      -0.31100423396407,0.31100423396407,0.083333333333333,-0.083333333333333,
      -0.083333333333333,0.083333333333333,0.02232909936926,-0.02232909936926};

   const double gg2[64] = {
      -0.02232909936926,-0.083333333333333,0.083333333333333,0.02232909936926,
      -0.083333333333333,-0.31100423396407,0.31100423396407,0.083333333333333,
      -0.083333333333333,-0.31100423396407,0.31100423396407,0.083333333333333,
      -0.02232909936926,-0.083333333333333,0.083333333333333,0.02232909936926,
      -0.02232909936926,-0.083333333333333,0.083333333333333,0.02232909936926,
      -0.083333333333333,-0.31100423396407,0.31100423396407,0.083333333333333,
      -0.083333333333333,-0.31100423396407,0.31100423396407,0.083333333333333,
      -0.02232909936926,-0.083333333333333,0.083333333333333,0.02232909936926,
      -0.083333333333333,-0.02232909936926,0.02232909936926,0.083333333333333,
      -0.31100423396407,-0.083333333333333,0.083333333333333,0.31100423396407,
      -0.31100423396407,-0.083333333333333,0.083333333333333,0.31100423396407,
      -0.083333333333333,-0.02232909936926,0.02232909936926,0.083333333333333,
      -0.083333333333333,-0.02232909936926,0.02232909936926,0.083333333333333,
      -0.31100423396407,-0.083333333333333,0.083333333333333,0.31100423396407,
      -0.31100423396407,-0.083333333333333,0.083333333333333,0.31100423396407,
      -0.083333333333333,-0.02232909936926,0.02232909936926,0.083333333333333};

   const double gg3[64] = {
      -0.02232909936926,-0.083333333333333,-0.31100423396407,-0.083333333333333,
      0.02232909936926,0.083333333333333,0.31100423396407,0.083333333333333,
      -0.02232909936926,-0.083333333333333,-0.31100423396407,-0.083333333333333,
      0.02232909936926,0.083333333333333,0.31100423396407,0.083333333333333,
      -0.083333333333333,-0.31100423396407,-0.083333333333333,-0.02232909936926,
      0.083333333333333,0.31100423396407,0.083333333333333,0.02232909936926,
      -0.083333333333333,-0.31100423396407,-0.083333333333333,-0.02232909936926,
      0.083333333333333,0.31100423396407,0.083333333333333,0.02232909936926,
      -0.083333333333333,-0.02232909936926,-0.083333333333333,-0.31100423396407,
      0.083333333333333,0.02232909936926,0.083333333333333,0.31100423396407,
      -0.083333333333333,-0.02232909936926,-0.083333333333333,-0.31100423396407,
      0.083333333333333,0.02232909936926,0.083333333333333,0.31100423396407,
      -0.31100423396407,-0.083333333333333,-0.02232909936926,-0.083333333333333,
      0.31100423396407,0.083333333333333,0.02232909936926,0.083333333333333,
      -0.31100423396407,-0.083333333333333,-0.02232909936926,-0.083333333333333,
      0.31100423396407,0.083333333333333,0.02232909936926,0.083333333333333};

   /* ---------------------------------------------------------------------
   * set shape function values at gaussain points
   * index operation: gg1[8*i+j] -> i = number of gaussian point,
   *                                j = number of shape function
   * ---------------------------------------------------------------------*/
   const double ga[64]={
      0.0094373878376559,0.035220810900865,0.1314458557658,0.035220810900865,
      0.035220810900865,0.1314458557658,0.49056261216234,0.1314458557658,
      0.035220810900865,0.1314458557658,0.49056261216234,0.1314458557658,
      0.0094373878376559,0.035220810900865,0.1314458557658,0.035220810900865,
      0.035220810900865,0.1314458557658,0.035220810900865,0.0094373878376559,
      0.1314458557658,0.49056261216234,0.1314458557658,0.035220810900865,
      0.1314458557658,0.49056261216234,0.1314458557658,0.035220810900865,
      0.035220810900865,0.1314458557658,0.035220810900865,0.0094373878376559,
      0.035220810900865,0.0094373878376559,0.035220810900865,0.1314458557658,
      0.1314458557658,0.035220810900865,0.1314458557658,0.49056261216234,
      0.1314458557658,0.035220810900865,0.1314458557658,0.49056261216234,
      0.035220810900865,0.0094373878376559,0.035220810900865,0.1314458557658,
      0.1314458557658,0.035220810900865,0.0094373878376559,0.035220810900865,
      0.49056261216234,0.1314458557658,0.035220810900865,0.1314458557658,
      0.49056261216234,0.1314458557658,0.035220810900865,0.1314458557658,
      0.1314458557658,0.035220810900865,0.0094373878376559,0.035220810900865};


   // --- copy constants to arrays
	memcpy(GF , g , 192 * sizeof(double));
	memcpy(GFD, gd, 384 * sizeof(double));
   memcpy(g1md,gg1, 64 * sizeof(double));
   memcpy(g2md,gg2, 64 * sizeof(double));
   memcpy(g3md,gg3, 64 * sizeof(double));
   memcpy(GA , ga,  64 * sizeof(double));

   // --- generate GF times GT'
   // --- loop over 6 faces
   for (i=0; i<6; i++)
   {
      // --- loop over gaussian points
      for (j=0; j<4; j++)
      {
         num1 = i*256+j*64;
         num2 = i*32 +j*8;
         for (k=0; k<8; k++)
         {
            for (l=0; l<8; l++)
            {
               GFTGF[num1 + k*8 + l] = GF[num2 + k]*GF[num2 + l];
            }
         }
      }
   }
}
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Init(double *x,double *y,double *z)
// ------------------------------------------------------------------------------------------------------------------ 
// --- store the geometry
// ------------------------------------------------------------------------------------------------------------------ 
{
   // --- store x,y,z coordinate pointers
   xnode = x;
   ynode = y;
   znode = z;
}
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Eval_Jacob_Iso_dV(const int numgp)
// ------------------------------------------------------------------------------------------------------------------ 
// --- compute jacobian at point xi,eta,psi and store it as matrix for isopar
// ---      | 0 1 2 |
// ---  J = | 3 4 5 |
// ---      | 6 7 8 |
// ------------------------------------------------------------------------------------------------------------------
{
   J[0] = compute_CATtimesB(xnode,g1md,numgp);
   J[1] = compute_CATtimesB(ynode,g1md,numgp);
   J[2] = compute_CATtimesB(znode,g1md,numgp);

   J[3] = compute_CATtimesB(xnode,g2md,numgp);
   J[4] = compute_CATtimesB(ynode,g2md,numgp);
   J[5] = compute_CATtimesB(znode,g2md,numgp);

   J[6] = compute_CATtimesB(xnode,g3md,numgp);
   J[7] = compute_CATtimesB(ynode,g3md,numgp);
   J[8] = compute_CATtimesB(znode,g3md,numgp);

   compute_Ainvers(J,Ji,&Jdet);
}
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Eval_Jacob_Iso_dA(const int face, const int numgp)
// ------------------------------------------------------------------------------------------------------------------ 
// --- function calculate the surface area for a gaussian point on a certain face
// --- face 1: xi=+1.0, face 2: xi=-1.0, face 3: eta=+1.0, face 4: eta=-1.0, face 5: psi=+1.0, face 6: psi=-1.0
// --- order of gaussian points look to the class constructer
// ------------------------------------------------------------------------------------------------------------------ 
{
	 int    i,num;
	 double t1[3];
	 double t2[3];
	 double  n[3];

    // --- init vectors
	 memset(t1, 0, 3 * sizeof(double));
	 memset(t2, 0, 3 * sizeof(double));

	 // --- comp tangential vectors, using structured storing of percalculated values of GFD
    // --- f1: t1 use G2, t2 use G3; f2: t1 use G2, t2 use G3; f3: t1 use G1, t2 use G3
    // --- f4: t1 use G1, t2 use G3; f5: t1 use G1, t2 use G2; f6: t1 use G1, t2 use G2
    num = numgp*8 + face*64;
	 for (i=0; i<8; i++)
	 {
       
		 t1[0] += xnode[i] * GFD[num + i];
		 t1[1] += ynode[i] * GFD[num + i];
		 t1[2] += znode[i] * GFD[num + i];

		 t2[0] += xnode[i] * GFD[num + i + 32];
		 t2[1] += ynode[i] * GFD[num + i + 32];
		 t2[2] += znode[i] * GFD[num + i + 32];
	 }

    // --- get normal vector 
	 n[0] = t1[2]*t2[1] - t1[1]*t2[2];
	 n[1] = t1[0]*t2[2] - t1[2]*t2[0];
	 n[2] = t1[1]*t2[0] - t1[0]*t2[1];

    // --- comp area of gp and return value
	 dA = sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);
 }
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Comp_Flux(double flux, double *flux_vector, int face)
// ------------------------------------------------------------------------------------------------------------------ 
// --- function calculate the flux_vector (load vector of flux) for one face denoted by the number "face"
// --- face 1: xi=+1.0, face 2: xi=-1.0, face 3: eta=+1.0, face 4: eta=-1.0, face 5: psi=+1.0, face 6: psi=-1.0
// ------------------------------------------------------------------------------------------------------------------ 
{
	 int    i,j,num;
    double factor;
	memset(flux_vector, 0, 8 * sizeof(double));
	 // --- face zero based, no face return function
	 if (face == 0) return;
	 face = face - 1;

	 // --- loop over 4 gaussian points 
	 for (i=0; i<4; i++)
	 {
		 // --- get dA and add constant flux value
		 Eval_Jacob_Iso_dA(face,i);
		 factor = dA*flux;
		 // --- add dA times g to the fluxvector, GF contains the shape function values
       num = face*32 + i*8;
       for (j=0; j<8; j++) flux_vector[j] += factor*GF[num + j];
	 }
}
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Comp_Convection(double h,double Tfluid,double *con_matrix,double *con_vector,int face)
// ------------------------------------------------------------------------------------------------------------------ 
// --- function calculate the con_vector (load vector of convection) for one face denoted by the number "face"
// --- function calculate the con_matrix (temp matrix of convection) for one face denoted by the number "face"
// --- face 1: xi=+1.0, face 2: xi=-1.0, face 3: eta=+1.0, face 4: eta=-1.0, face 5: psi=+1.0, face 6: psi=-1.0
// ------------------------------------------------------------------------------------------------------------------ 
{
   int    i,j,num1,num2;
   double factor1,factor2;

   // --- face zero based, no face return function
   if (face == 0) return;
   face = face - 1;

   // --- loop over 4 gaussian points 
   for (i=0; i<4; i++)
   {
      // --- get dA and add constant flux value
      Eval_Jacob_Iso_dA(face,i);

      // --- comp constant values 
      factor1 = dA*h*Tfluid;
      factor2 = dA*h;

      // --- sum up the values and generate load vector and convection matrix
      num1 = face*32  + i*8;
      num2 = face*256 + i*64;
      for (j = 0; j<8;  j++) con_vector[j] += GF   [num1+j]*factor1;
      for (j = 0; j<64; j++) con_matrix[j] += GFTGF[num2+j]*factor2;
   }
}
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Comp_Convection_Diagonal(double h,double Tfluid,double *con_matrix,double *con_vector,int face)
// ------------------------------------------------------------------------------------------------------------------ 
// --- function calculate the con_vector (load vector of convection) for one face denoted by the number "face"
// --- function calculate the con_matrix (temp matrix of convection in diagonalized way) for one face denoted by the number "face"
// --- face 1: xi=+1.0, face 2: xi=-1.0, face 3: eta=+1.0, face 4: eta=-1.0, face 5: psi=+1.0, face 6: psi=-1.0
// ------------------------------------------------------------------------------------------------------------------ 
{
   int    i,j,k,num1,num2;
   double factor1,factor2;
   memset(con_vector, 0, 8 * sizeof(double));
   memset(con_matrix, 0, 64 * sizeof(double));

   // --- face zero based, no face return function
   if(face == 0) return;
   face = face - 1;

   // --- loop over 4 gaussian points 
   for(i=0; i<4; i++)
   {
      // --- get dA and add constant flux value
      Eval_Jacob_Iso_dA(face,i);

      // --- comp constant values 
      factor1 = dA*h*Tfluid;
      factor2 = dA*h;
      // --- sum up the values and generate load vector and convection matrix
      num1 = face*32  + i*8;
      num2 = face*256 + i*64;
      for (j=0; j<8; j++)
      {
         con_vector[j] += GF[num1+j]*factor1;
         for (k=0; k<8; k++)
			 con_matrix[j*9] += GFTGF[num2+j*8+k]*factor2;
      }
   }
}
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Comp_HeatGeneration(double Q, double *heat_vector, int element) 
// ------------------------------------------------------------------------------------------------------------------ 
// --- function calculate the heat_vector (load vector of heat) for whole element
// ------------------------------------------------------------------------------------------------------------------ 
{
   int    i,j;
   double factor;

   // --- loop over 8 gaussian points (volume)
   for (i=0; i<8; i++)
   {
      // --- get Jacobian, inverted Jacobian and dV
      Eval_Jacob_Iso_dV(i);

      // --- add constant heat value to Jdet
      factor = Q*Jdet*element;

      // --- add values to heat vector
      for (j=0; j<8; j++) heat_vector[j] += GA[8*i+j]*factor;
   }
}
// ------------------------------------------------------------------------------------------------------------------
void CElement::Comp_Conductivity(double Conductivity,double *con_matrix)
// ------------------------------------------------------------------------------------------------------------------ 
// --- function calculate the conductivity_matrix for whole element
// --- only for same conductivity to each three directions
// --- conductivity matrix is stored in the order S[i][j] of i*8 + j 
// ------------------------------------------------------------------------------------------------------------------
{
   int    i,j,k;
   double factor;
   // --- loop over 8 gaussian points (volume)
   for (i=0; i<8; i++)
   {
      // --- get Jacobian, inverted Jacobian and dV
      Eval_Jacob_Iso_dV(i);

      // --- comp shape function derivates with inv. Jacobian
      Eval_GM(G1,1,i);
      Eval_GM(G2,2,i);
      Eval_GM(G3,3,i);

      // --- B*D*B' (D only diagonal elements, same conductivity for all directions)
      for (j=0; j<8; j++)
      {
         for (k=0; k<8; k++)
         {
            // --- sparse computation because of diagonal filled matrix, B.D.B' * Jdet
            con_matrix[j*8 + k] += G1[j]*G1[k]*Conductivity*Jdet; // G1.D(1,1).G1' * Jdet
            con_matrix[j*8 + k] += G2[j]*G2[k]*Conductivity*Jdet; // G2.D(2,2).G2' * Jdet
            con_matrix[j*8 + k] += G3[j]*G3[k]*Conductivity*Jdet; // G3.D(3,3).G3' * Jdet
         }
      }
   }
}
// ------------------------------------------------------------------------------------------------------------------ 
void CElement::Eval_GM(double *G,const int i,const int j)
// ------------------------------------------------------------------------------------------------------------------ 
//   multiply invers of Jacobian with shape function gj derivate for Gi
//   i can be 1,2,3 for x,y or z and j denotes the gaussian point
// ------------------------------------------------------------------------------------------------------------------ 
{
   double a11,a12,a13;

   switch(i)
   {
   case 1: a11 = Ji[0]; a12 = Ji[1]; a13 = Ji[2]; break;
   case 2: a11 = Ji[3]; a12 = Ji[4]; a13 = Ji[5]; break;
   case 3: a11 = Ji[6]; a12 = Ji[7]; a13 = Ji[8]; break;
   }

   for (int k = 0; k < 8; k++)
	   G[k] = a11*g1md[k + 8 * j] + a12*g2md[k + 8 * j] + a13*g3md[k + 8 * j];
}